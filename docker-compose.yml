version: '3.8'

services:
  # PostgreSQL 14 with pg_stat_statements extension
  postgres:
    image: postgres:14
    container_name: optischema-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-optischema}
      POSTGRES_USER: ${POSTGRES_USER:-optischema}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-optischema_pass}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-optischema}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - optischema-network

  # FastAPI Backend
  optischema-api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: optischema-api
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4o}
      - BACKEND_HOST=${BACKEND_HOST:-0.0.0.0}
      - BACKEND_PORT=${BACKEND_PORT:-8000}
      - BACKEND_RELOAD=${BACKEND_RELOAD:-true}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CACHE_TTL=${CACHE_TTL:-3600}
      - CACHE_SIZE=${CACHE_SIZE:-1000}
      - POLLING_INTERVAL=${POLLING_INTERVAL:-30}
      - TOP_QUERIES_LIMIT=${TOP_QUERIES_LIMIT:-10}
      - ANALYSIS_INTERVAL=${ANALYSIS_INTERVAL:-60}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - api_cache:/app/cache
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - optischema-network
    restart: unless-stopped

  # Next.js Frontend
  optischema-ui:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: optischema-ui
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=${UI_WS_URL:-ws://localhost:8000/ws}
      - NODE_ENV=development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - optischema-api
    networks:
      - optischema-network
    restart: unless-stopped

  # Optional: Sandbox PostgreSQL for testing patches
  postgres_sandbox:
    image: postgres:14
    container_name: optischema-sandbox
    environment:
      POSTGRES_DB: ${SANDBOX_POSTGRES_DB:-sandbox}
      POSTGRES_USER: ${SANDBOX_POSTGRES_USER:-sandbox}
      POSTGRES_PASSWORD: ${SANDBOX_POSTGRES_PASSWORD:-sandbox_pass}
    ports:
      - "5433:5432"
    volumes:
      - sandbox_data:/var/lib/postgresql/data
      - ./scripts/sandbox_init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SANDBOX_POSTGRES_USER:-sandbox}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - optischema-network
    profiles:
      - sandbox

volumes:
  pgdata:
    driver: local
  api_cache:
    driver: local
  sandbox_data:
    driver: local

networks:
  optischema-network:
    driver: bridge 